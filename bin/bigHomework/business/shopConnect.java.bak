package bigHomework.business;



import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ScrollPaneConstants;

public class shopConnect extends JFrame {

	/**
	 *  ?同时写进一个文件会不会有多线程问题：要不要写两个txt来记录聊天记录  要
	 */
	private static final long serialVersionUID = 1L;
	public String shopName;
	public JTextArea jta,jta2;
	public String url = "G:\\eclipse\\Java大作业\\聊天记录\\",userName;
	public DataInputStream in;
	public DataOutputStream out;
	public FileOutputStream fos;

	public shopConnect(String title,String userName) throws HeadlessException 
	{
		super(title);
		this.shopName = title;
		this.userName = userName;
		init();
	}
	
	public static void main(String [] args)
	{
		new shopConnect("s","b").init();;
		
	}
	public void init()
	{
		initFrame(this ,300,400);
		url=url+userName+"_"+shopName+".txt";
		try {
			fos = new FileOutputStream(url, true);
		} catch (FileNotFoundException e) {
			
			e.printStackTrace();
		}
		JPanel panel = new JPanel(new BorderLayout());
		jta = new JTextArea();
		jta2 = new JTextArea();
		jta.setFont(new Font("宋体", Font.ITALIC, 18));
		jta.setEditable(false);
		
		jta2.setFont(new Font("宋体", Font.ITALIC, 18));
		JScrollPane p1scrollPane = new JScrollPane(
                jta,
                ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,
                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER//
        );
		p1scrollPane.setPreferredSize(new Dimension(300, 300));
		JPanel sendPane = new JPanel();
		
		sendPane.setPreferredSize(new Dimension(60,100));
		sendPane.setBackground(Color.WHITE);
		JButton send = new JButton("发送");
		send.setPreferredSize(new Dimension(60, 50));
		send.setContentAreaFilled(false);
		send.setForeground(Color.pink);
		send.setBorderPainted(false);
		send.setEnabled(false);
		
		JScrollPane p2scrollPane = new JScrollPane(
                jta2,
                ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,
                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER//
        );
		p2scrollPane.setPreferredSize(new Dimension(240, 100));
		this.add(panel);
		sendPane.add(send);
		panel.add(p1scrollPane,BorderLayout.NORTH);
		panel.add(p2scrollPane,BorderLayout.CENTER);
		panel.add(sendPane,BorderLayout.EAST);
		getHistoryChat();
	
		send.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseReleased(MouseEvent e)
			{
				super.mouseReleased(e);
				String text = jta2.getText();
				jta.append(userName+":"+text+"\n");
				jta2.setText("");
				try {
					out.writeUTF(userName+":" + text);
				} catch (IOException e1) {
					
					e1.printStackTrace();
				}//将客户端的信息传递给服务器    
				recordChat(userName+":"+text);
			}
		});
	}
	public static void initFrame(JFrame frame, int width, int height)
	{
		Toolkit toolkit = Toolkit.getDefaultToolkit();// 获取与系统相关的工具类对象
		Dimension d = toolkit.getScreenSize();// 分辨率
		frame.setBounds((d.width - width) / 2, (d.height - height) / 2, width, height);
		frame.setVisible(true);
		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	}
	
	public void getHistoryChat()
	{
		/**
		 * 	初始化是把历史聊天记录放在聊天框
		 */
		InputStreamReader is=null;
		try {
			is = new InputStreamReader(new FileInputStream(url),"UTF-8");
			BufferedReader br = new BufferedReader(is);
			String s= null;
			try {
				while((s=br.readLine())!=null) {
					jta.append(s);
					jta.append("\n");
				}
			} catch (IOException e1) {
				
				e1.printStackTrace();
			}
			br.close();
			is.close();
		} catch (UnsupportedEncodingException e1) {
			
			e1.printStackTrace();
		} catch (FileNotFoundException e1) {
			
			e1.printStackTrace();
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		
	}
	public void recordChat(String message) 
	{
		OutputStreamWriter osw = null;
		BufferedWriter br = null;
		try {
			osw = new OutputStreamWriter(fos,"UTF-8");
			br = new BufferedWriter(osw);
			try {
				br.write(message);
				br.write("\n");
				br.flush();
			} catch (IOException e1) {
				
				e1.printStackTrace();
			}
		}catch (UnsupportedEncodingException e2) {
			
			e2.printStackTrace();
		}
		try {
			br.close();
		} catch (IOException e2) {
			
			e2.printStackTrace();
		}
		try {
			osw.close();
		} catch (IOException e1) {
			
			e1.printStackTrace();
		}
		
	}
}


